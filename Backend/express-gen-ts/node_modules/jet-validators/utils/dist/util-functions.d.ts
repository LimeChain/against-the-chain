import { IParseVldrFn, TParseOnError } from './parseObject';
export interface ITransVldrFn<T> {
    (arg: unknown, cb?: (arg: T) => void): arg is T;
    isTransFn?: true;
}
export declare function nonNullable<T>(cb: IParseVldrFn<T>): (arg: unknown, onError?: TParseOnError) => arg is NonNullable<T>;
export declare function transform<T>(transFn: (arg: unknown) => T, vldt: ((arg: unknown) => arg is T)): ITransVldrFn<T>;
export declare function parseBoolean(arg: unknown, errMsg?: string): boolean;
export declare function parseOptionalBoolean(arg: unknown): boolean | undefined;
export declare function parseNullableBoolean(arg: unknown): boolean | null;
export declare function parseNullishBoolean(arg: unknown): boolean | null | undefined;
export declare function parseJson<T>(arg: unknown): T;
export declare function parseOptionalJson<T>(arg: unknown): T | undefined;
export declare function parseNullableJson<T>(arg: unknown): T | null;
export declare function parseNullishJson<T>(arg: unknown): T | null | undefined;
